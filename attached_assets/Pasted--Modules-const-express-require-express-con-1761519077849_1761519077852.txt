//――――――――――――――――――――――――――――――――――――――――――
// ┏  Modules ┓
const express = require("express");
const fetch = require("node-fetch");
const cheerio = require("cheerio");
const cookie = require("cookie");
const axios = require("axios");
const FormData = require("form-data");

const router = express.Router();

//――――――――――――――――――――――――――――――――――――――――――
// ┏  Funções Auxiliares ┓
async function getBuffer(url, options = {}) {
    try {
        const res = await axios({
            method: "get",
            url,
            headers: { 'DNT': 1, 'Upgrade-Insecure-Requests': 1 },
            ...options,
            responseType: "arraybuffer",
        });
        return res.data;
    } catch (err) {
        throw err;
    }
}

async function post(url, formdata = {}, cookies) {
    const encode = encodeURIComponent;
    const body = Object.keys(formdata)
        .map((key) => {
            let vals = formdata[key];
            const isArray = Array.isArray(vals);
            const keys = encode(key + (isArray ? "[]" : ""));
            if (!isArray) vals = [vals];
            return vals.map((val) => keys + "=" + encode(val)).join("&");
        })
        .join("&");

    return await fetch(`${url}?${body}`, {
        method: "GET",
        headers: {
            Accept: "*/*",
            "Accept-Language": "en-US,en;q=0.9",
            "User-Agent":
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
            Cookie: cookies,
        },
    });
}

//――――――――――――――――――――――――――――――――――――――――――
// ┏  Função Principal Photooxy ┓
async function generatePhoto(url, text) {
    const geturl = await fetch(url, { headers: { "User-Agent": "Mozilla/5.0" } });
    const html = await geturl.text();

    // Cookies
    let cookies = geturl.headers
        .get("set-cookie")
        .split(",")
        .map((v) => cookie.parse(v))
        .reduce((a, c) => ({ ...a, ...c }), {});

    cookies = {
        __cfduid: cookies.__cfduid,
        PHPSESSID: cookies.PHPSESSID,
    };
    cookies = Object.entries(cookies)
        .map(([name, value]) => cookie.serialize(name, value))
        .join("; ");

    // Token
    const $ = cheerio.load(html);
    const token = $('input[name="token"]').attr("value");

    // Formulário
    const form = new FormData();
    if (typeof text === "string") text = [text];
    for (let t of text) form.append("text[]", t);
    form.append("submit", "Go");
    form.append("token", token);
    form.append("build_server", "https://e2.yotools.net");
    form.append("build_server_id", 2);

    // POST para gerar imagem
    const postPage = await fetch(url, {
        method: "POST",
        headers: { Cookie: cookies, ...form.getHeaders() },
        body: form.getBuffer(),
    });

    const postHtml = await postPage.text();
    const $$ = cheerio.load(postHtml);
    const token2 = $$("#form_value").text();
    if (!token2) throw new Error("Token não encontrado!");

    const response = await post(
        "https://photooxy.com/effect/create-image",
        JSON.parse(token2),
        cookies
    );

    const resultJson = await response.json();
    const imageUrl = `https://e2.yotools.net/${resultJson.image}`;
    const buffer = await getBuffer(imageUrl);

    return buffer;
}

//――――――――――――――――――――――――――――――――――――――――――
// ┏  Rota Express ┓
router.get("/", async (req, res) => {
    try {
        const { url, text } = req.query;
        if (!url || !text) return res.status(400).send("Faltando parâmetros: url ou text");

        const imageBuffer = await generatePhoto(url, text);
        res.set("Content-Type", "image/png");
        res.send(imageBuffer);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

module.exports = router;