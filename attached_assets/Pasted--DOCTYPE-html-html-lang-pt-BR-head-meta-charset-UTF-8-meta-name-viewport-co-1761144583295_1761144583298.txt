<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Neon Banner Generator | Premium</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Montserrat:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        --bg-primary: #0a1129;
        --bg-secondary: #0d1a3a;
        --bg-card: #111f44;
        --neon-cyan: #00f7ff;
        --neon-purple: #b400ff;
        --neon-pink: #ff00c8;
        --text-primary: #ffffff;
        --text-secondary: #a0b3e0;
        --accent: #1a2d5e;
        --success: #00ff9d;
      }
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: "Montserrat", sans-serif;
        background: linear-gradient(
          135deg,
          var(--bg-primary) 0%,
          #0c1535 50%,
          var(--bg-primary) 100%
        );
        color: var(--text-primary);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
      }
      .container {
        display: flex;
        flex: 1;
        padding: 20px;
        gap: 30px;
        max-width: 1600px;
        margin: 0 auto;
        width: 100%;
      }
      header {
        background: rgba(11, 17, 41, 0.9);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(0, 247, 255, 0.2);
        padding: 15px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
        z-index: 100;
      }
      .logo {
        display: flex;
        align-items: center;
        gap: 12px;
      }
      .logo-icon {
        color: var(--neon-cyan);
        font-size: 28px;
        filter: drop-shadow(0 0 8px var(--neon-cyan));
      }
      .logo-text {
        font-family: "Orbitron", sans-serif;
        font-weight: 900;
        font-size: 24px;
        background: linear-gradient(90deg, var(--neon-cyan), var(--neon-purple));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        letter-spacing: 1px;
      }
      .header-controls {
        display: flex;
        gap: 15px;
      }
      .theme-toggle {
        background: var(--bg-card);
        border: 1px solid var(--accent);
        color: var(--text-secondary);
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .theme-toggle:hover {
        color: var(--neon-cyan);
        border-color: var(--neon-cyan);
      }
      .control-panel {
        width: 380px;
        background: var(--bg-card);
        border-radius: 16px;
        padding: 25px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
        border: 1px solid rgba(255, 255, 255, 0.05);
        display: flex;
        flex-direction: column;
        gap: 20px;
        height: fit-content;
        position: sticky;
        top: 20px;
      }
      .panel-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 10px;
      }
      .panel-icon {
        color: var(--neon-cyan);
        font-size: 20px;
      }
      .panel-title {
        font-family: "Orbitron", sans-serif;
        font-weight: 700;
        font-size: 18px;
        color: var(--text-primary);
      }
      .section {
        background: rgba(17, 26, 53, 0.7);
        border-radius: 12px;
        padding: 18px;
        border: 1px solid rgba(255, 255, 255, 0.05);
      }
      .section-title {
        font-family: "Orbitron", sans-serif;
        font-size: 14px;
        font-weight: 600;
        color: var(--neon-cyan);
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      .section-title i {
        font-size: 14px;
      }
      .form-group {
        margin-bottom: 16px;
      }
      .form-group label {
        display: block;
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 6px;
        color: var(--text-secondary);
      }
      .form-control {
        width: 100%;
        padding: 12px 15px;
        background: rgba(10, 17, 41, 0.7);
        border: 1px solid var(--accent);
        border-radius: 8px;
        color: var(--text-primary);
        font-family: "Montserrat", sans-serif;
        font-size: 14px;
        transition: all 0.3s ease;
      }
      .form-control:focus {
        outline: none;
        border-color: var(--neon-cyan);
        box-shadow: 0 0 0 2px rgba(0, 247, 255, 0.2);
      }
      .file-input-wrapper {
        position: relative;
        overflow: hidden;
        display: inline-block;
        width: 100%;
      }
      .file-input-wrapper input[type="file"] {
        position: absolute;
        left: 0;
        top: 0;
        opacity: 0;
        width: 100%;
        height: 100%;
        cursor: pointer;
      }
      .file-input-button {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 12px 15px;
        background: rgba(10, 17, 41, 0.7);
        border: 1px dashed var(--accent);
        border-radius: 8px;
        color: var(--text-secondary);
        font-size: 14px;
        transition: all 0.3s ease;
      }
      .file-input-button:hover {
        border-color: var(--neon-cyan);
        color: var(--neon-cyan);
      }
      .button-group {
        display: flex;
        gap: 12px;
        margin-top: 10px;
      }
      .btn {
        flex: 1;
        padding: 14px;
        border: none;
        border-radius: 8px;
        font-family: "Orbitron", sans-serif;
        font-weight: 700;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
      }
      .btn-primary {
        background: linear-gradient(135deg, var(--neon-cyan), var(--neon-purple));
        color: #000;
        box-shadow: 0 4px 15px rgba(0, 247, 255, 0.3);
      }
      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 247, 255, 0.4);
      }
      .btn-secondary {
        background: rgba(255, 255, 255, 0.05);
        color: var(--text-primary);
        border: 1px solid var(--accent);
      }
      .btn-secondary:hover {
        background: rgba(255, 255, 255, 0.1);
        border-color: var(--neon-cyan);
      }
      .preview-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 25px;
      }
      .preview-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .preview-title {
        font-family: "Orbitron", sans-serif;
        font-weight: 700;
        font-size: 22px;
        color: var(--text-primary);
      }
      .canvas-container {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--bg-card);
        border-radius: 16px;
        padding: 25px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
        border: 1px solid rgba(255, 255, 255, 0.05);
        overflow: hidden;
      }
      canvas {
        border-radius: 8px;
        max-width: 100%;
        height: auto;
        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.5);
      }
      footer {
        background: rgba(11, 17, 41, 0.9);
        border-top: 1px solid rgba(0, 247, 255, 0.2);
        padding: 20px 30px;
        margin-top: 30px;
        text-align: center;
        color: var(--text-secondary);
        font-size: 14px;
      }
      .footer-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .footer-links {
        display: flex;
        gap: 20px;
      }
      .footer-links a {
        color: var(--text-secondary);
        text-decoration: none;
        transition: color 0.3s ease;
      }
      .footer-links a:hover {
        color: var(--neon-cyan);
      }
      @media (max-width: 1200px) {
        .container {
          flex-direction: column;
        }
        .control-panel {
          width: 100%;
          position: static;
        }
        .button-group {
          flex-direction: column;
        }
      }
      @media (max-width: 768px) {
        .container {
          padding: 15px;
        }
        .control-panel,
        .canvas-container {
          padding: 20px;
        }
        .footer-content {
          flex-direction: column;
          gap: 15px;
        }
        header {
          padding: 15px 20px;
        }
      }
      @keyframes glow {
        0% {
          box-shadow: 0 0 5px var(--neon-cyan), 0 0 10px var(--neon-cyan);
        }
        50% {
          box-shadow: 0 0 15px var(--neon-cyan), 0 0 30px var(--neon-cyan);
        }
        100% {
          box-shadow: 0 0 5px var(--neon-cyan), 0 0 10px var(--neon-cyan);
        }
      }
      .premium-badge {
        background: linear-gradient(135deg, var(--neon-cyan), var(--neon-purple));
        color: #000;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 700;
        font-family: "Orbitron", sans-serif;
        margin-left: 10px;
        animation: glow 2s infinite;
      }
      
      /* Estilos para o bot√£o de download do Catbox */
      .catbox-download {
        margin-top: 20px;
        text-align: center;
      }
      
      .catbox-link {
        display: inline-flex;
        align-items: center;
        gap: 10px;
        padding: 12px 25px;
        background: linear-gradient(135deg, var(--neon-cyan), var(--neon-purple));
        color: #000;
        text-decoration: none;
        border-radius: 8px;
        font-family: "Orbitron", sans-serif;
        font-weight: 700;
        font-size: 16px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 247, 255, 0.3);
      }
      
      .catbox-link:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 247, 255, 0.4);
      }
      
      .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: var(--neon-cyan);
        animation: spin 1s ease-in-out infinite;
      }
      
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
    </style>
  </head>
  <body>
    <header>
      <div class="logo">
        <i class="fas fa-bolt logo-icon"></i>
        <span class="logo-text">NEON BANNER GENERATOR</span>
        <span class="premium-badge">PREMIUM</span>
      </div>
      <div class="header-controls">
        <div class="theme-toggle">
          <i class="fas fa-palette"></i>
        </div>
      </div>
    </header>

    <div class="container">
      <div class="control-panel">
        <div class="panel-header">
          <i class="fas fa-sliders-h panel-icon"></i>
          <h2 class="panel-title">CONTROLES DO BANNER</h2>
        </div>
        <div class="section">
          <div class="section-title">
            <i class="fas fa-image"></i> CONTE√öDO VISUAL
          </div>
          <div class="form-group">
            <label for="wallpaper">Papel de Parede</label>
            <div class="file-input-wrapper">
              <input type="file" id="wallpaper" accept="image/*" />
              <div class="file-input-button">
                <i class="fas fa-upload"></i> Selecionar Wallpaper
              </div>
            </div>
          </div>
          <div class="form-group">
            <label for="avatar">Foto de Perfil</label>
            <div class="file-input-wrapper">
              <input type="file" id="avatar" accept="image/*" />
              <div class="file-input-button">
                <i class="fas fa-user-circle"></i> Selecionar Avatar
              </div>
            </div>
          </div>
        </div>
        <div class="section">
          <div class="section-title">
            <i class="fas fa-font"></i> CONTE√öDO DE TEXTO
          </div>
          <div class="form-group">
            <label for="name">Nome</label>
            <input
              type="text"
              id="name"
              class="form-control"
              value="NEON"
              placeholder="Digite o nome"
            />
          </div>
          <div class="form-group">
            <label for="speed">Velocidade</label>
            <input
              type="number"
              id="speed"
              class="form-control"
              value="999"
              placeholder="Digite a velocidade"
            />
          </div>
          <div class="form-group">
            <label for="label">R√≥tulo Inferior</label>
            <input
              type="text"
              id="label"
              class="form-control"
              value="VELOCIDADE"
              placeholder="Digite o r√≥tulo"
            />
          </div>
          <div class="form-group">
            <label for="system">Tipo de Sistema</label>
            <input
              type="text"
              id="system"
              class="form-control"
              value=""
              placeholder="Digite o tipo de sistema"
            />
          </div>
        </div>
        <div class="section">
          <div class="section-title">
            <i class="fas fa-clock"></i> DATA E HORA
          </div>
          <div class="form-group">
            <label for="datetime">Data e Hora Personalizada</label>
            <input
              type="text"
              id="datetime"
              class="form-control"
              placeholder="DD/MM/AAAA - HH:MM"
            />
            <small
              style="
                color: var(--text-secondary);
                font-size: 12px;
                margin-top: 5px;
                display: block;
              "
              >Deixe em branco para usar a data e hora atual</small
            >
          </div>
        </div>
        <div class="button-group">
          <button id="generate" class="btn btn-primary">
            <i class="fas fa-bolt"></i> GERAR BANNER
          </button>
          <button id="download" class="btn btn-secondary">
            <i class="fas fa-download"></i> BAIXAR PNG
          </button>
        </div>
        <div class="catbox-download" id="catbox-download-container" style="display: none;">
          <a href="#" id="catbox-link" class="catbox-link" target="_blank">
            <i class="fas fa-download"></i> BAIXAR DO CATBOX
          </a>
        </div>
      </div>

      <div class="preview-panel">
        <div class="preview-header">
          <h2 class="preview-title">PR√âVIA DO BANNER</h2>
          <div class="canvas-size">1365 √ó 618 px</div>
        </div>

        <div class="canvas-container">
          <canvas id="canvas" width="1365" height="618"></canvas>
        </div>
      </div>
    </div>

    <footer>
      <div class="footer-content">
        <div class="copyright">
          &copy; 2023 Neon Banner Generator Premium. Todos os direitos reservados.
        </div>
        <div class="footer-links">
          <a href="#">Termos de Uso</a>
          <a href="#">Pol√≠tica de Privacidade</a>
          <a href="#">Suporte</a>
        </div>
      </div>
    </footer>

    <script>
      const canvas = document.getElementById("canvas");
      const ctx = canvas.getContext("2d");
      const wallpaperInput = document.getElementById("wallpaper");
      const avatarInput = document.getElementById("avatar");
      const nameInput = document.getElementById("name");
      const speedInput = document.getElementById("speed");
      const labelInput = document.getElementById("label");
      const systemInput = document.getElementById("system");
      const datetimeInput = document.getElementById("datetime");
      const generateBtn = document.getElementById("generate");
      const downloadBtn = document.getElementById("download");
      const catboxContainer = document.getElementById("catbox-download-container");
      const catboxLink = document.getElementById("catbox-link");

      let wallpaperImg = null;
      let avatarImg = null;
      let catboxUrl = null;

      // Fun√ß√£o para ler par√¢metros da URL
      function getUrlParams() {
        const params = new URLSearchParams(window.location.search);
        const urlParams = {};
        
        if (params.has('name')) urlParams.name = params.get('name');
        if (params.has('speed')) urlParams.speed = params.get('speed');
        if (params.has('label')) urlParams.label = params.get('label');
        if (params.has('system')) urlParams.system = params.get('system');
        if (params.has('datetime')) urlParams.datetime = params.get('datetime');
        
        return urlParams;
      }

      // Aplicar par√¢metros da URL aos campos
      function applyUrlParams() {
        const urlParams = getUrlParams();
        
        if (urlParams.name) nameInput.value = urlParams.name;
        if (urlParams.speed) speedInput.value = urlParams.speed;
        if (urlParams.label) labelInput.value = urlParams.label;
        if (urlParams.system) systemInput.value = urlParams.system;
        if (urlParams.datetime) datetimeInput.value = urlParams.datetime;
      }

      // Fun√ß√£o para enviar imagem para a API Neext (corrigida)
      async function uploadToCatbox() {
        return new Promise((resolve, reject) => {
          // Converter canvas para blob
          canvas.toBlob(async (blob) => {
            try {
              const formData = new FormData();
              formData.append('file', blob, 'neon-banner.png');
              
              // Usando a API correta conforme seu exemplo
              const response = await fetch('https://www.api.neext.online/upload/catbox', {
                method: 'POST',
                body: formData
              });
              
              if (response.ok) {
                const result = await response.json();
                resolve(result.url);
              } else {
                reject(new Error('Falha no upload para a API'));
              }
            } catch (error) {
              reject(error);
            }
          }, 'image/png');
        });
      }

      // Fun√ß√£o para mostrar o bot√£o de download do Catbox
      function showCatboxDownload(url) {
        catboxUrl = url;
        catboxLink.href = url;
        catboxContainer.style.display = 'block';
      }

      // Fun√ß√£o para gerar e enviar para a API
      async function generateAndUpload() {
        // Verificar se h√° par√¢metros na URL
        const urlParams = getUrlParams();
        const hasUrlParams = Object.keys(urlParams).length > 0;
        
        if (hasUrlParams) {
          // Se h√° par√¢metros, gerar e enviar automaticamente
          draw();
          
          try {
            // Mostrar indicador de carregamento
            catboxLink.innerHTML = '<span class="loading"></span> ENVIANDO PARA API...';
            catboxContainer.style.display = 'block';
            
            const url = await uploadToCatbox();
            showCatboxDownload(url);
          } catch (error) {
            console.error('Erro ao enviar para API:', error);
            catboxLink.innerHTML = '<i class="fas fa-exclamation-triangle"></i> ERRO NO UPLOAD';
          }
        }
      }

      function readImageFile(file, callback) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const img = new Image();
          img.onload = () => callback(img);
          img.src = e.target.result;
        };
        reader.readAsDataURL(file);
      }

      wallpaperInput.addEventListener("change", (e) => {
        const f = e.target.files[0];
        if (!f) return;
        readImageFile(f, (img) => {
          wallpaperImg = img;
          draw();
        });
      });

      avatarInput.addEventListener("change", (e) => {
        const f = e.target.files[0];
        if (!f) return;
        readImageFile(f, (img) => {
          avatarImg = img;
          draw();
        });
      });

      function draw() {
        const W = canvas.width,
          H = canvas.height;

        ctx.clearRect(0, 0, W, H);

        // Draw background
        if (wallpaperImg) {
          const img = wallpaperImg;
          const r = Math.max(W / img.width, H / img.height);
          const iw = img.width * r;
          const ih = img.height * r;
          const ox = (W - iw) / 2;
          const oy = (H - ih) / 2;
          ctx.drawImage(img, ox, oy, iw, ih);
        } else {
          const g = ctx.createLinearGradient(0, 0, 0, H);
          g.addColorStop(0, "#0a1635");
          g.addColorStop(1, "#0a1129");
          ctx.fillStyle = g;
          ctx.fillRect(0, 0, W, H);

          const g2 = ctx.createRadialGradient(
            W / 2,
            H / 2,
            0,
            W / 2,
            H / 2,
            H
          );
          g2.addColorStop(0, "rgba(0, 247, 255, 0.05)");
          g2.addColorStop(1, "rgba(180, 0, 255, 0.05)");
          ctx.fillStyle = g2;
          ctx.fillRect(0, 0, W, H);
        }

        // Draw top-left date with calendar icon
        const now = new Date();
        const dateText = datetimeInput.value.trim()
          ? datetimeInput.value.split(" - ")[0]
          : now.toLocaleDateString("pt-BR");
        const timeText = datetimeInput.value.trim()
          ? datetimeInput.value.split(" - ")[1]
          : now.toLocaleTimeString("pt-BR", { hour: "2-digit", minute: "2-digit" });

        ctx.save();
        ctx.translate(30, 25);
        ctx.beginPath();
        ctx.roundRect(-2, -2, 24, 24, 4);
        ctx.strokeStyle = "#00f7ff";
        ctx.lineWidth = 2;
        ctx.stroke();

        ctx.beginPath();
        ctx.roundRect(-2, -2, 24, 8, 4);
        ctx.fillStyle = "#00f7ff";
        ctx.fill();

        ctx.beginPath();
        ctx.moveTo(5, 8);
        ctx.lineTo(5, 22);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(10, 8);
        ctx.lineTo(10, 22);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(15, 8);
        ctx.lineTo(15, 22);
        ctx.stroke();

        ctx.restore();

        ctx.font = "600 18px Orbitron, sans-serif";
        ctx.textBaseline = "top";
        ctx.fillStyle = "#ffffff";
        ctx.fillText(dateText, 65, 25);

        ctx.textAlign = "right";
        ctx.fillText(timeText, W - 30, 25);

        const timeWidth = ctx.measureText(timeText).width;
        ctx.save();
        ctx.translate(W - 30 - timeWidth - 20, 37);

        ctx.beginPath();
        ctx.arc(0, 0, 12, 0, Math.PI * 2);
        ctx.strokeStyle = "#00f7ff";
        ctx.lineWidth = 2;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(0, -7);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(5, 0);
        ctx.stroke();
        ctx.restore();

        ctx.textAlign = "left";

        const centerX = W / 2;
        const avatarY = H * 0.25;
        const avatarR = 100;

        ctx.save();
        if (avatarImg) {
          ctx.beginPath();
          ctx.arc(centerX, avatarY, avatarR + 8, 0, Math.PI * 2);
          ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
          ctx.fill();

          ctx.beginPath();
          ctx.arc(centerX, avatarY, avatarR, 0, Math.PI * 2);
          ctx.closePath();
          ctx.clip();

          const img = avatarImg;
          const r = Math.max((avatarR * 2) / img.width, (avatarR * 2) / img.height);
          const iw = img.width * r;
          const ih = img.height * r;
          ctx.drawImage(img, centerX - iw / 2, avatarY - ih / 2, iw, ih);
          ctx.restore();

          ctx.beginPath();
          ctx.arc(centerX, avatarY, avatarR, 0, Math.PI * 2);
          ctx.lineWidth = 4;
          ctx.strokeStyle = "rgba(255, 255, 255, 0.9)";
          ctx.stroke();

          ctx.beginPath();
          ctx.arc(centerX, avatarY, avatarR + 4, 0, Math.PI * 2);
          ctx.lineWidth = 2;
          ctx.strokeStyle = "rgba(0, 247, 255, 0.7)";
          ctx.stroke();
        } else {
          ctx.beginPath();
          ctx.arc(centerX, avatarY, avatarR, 0, Math.PI * 2);
          ctx.fillStyle = "rgba(255, 255, 255, 0.05)";
          ctx.fill();
          ctx.lineWidth = 4;
          ctx.strokeStyle = "rgba(255, 255, 255, 0.3)";
          ctx.stroke();
        }

        const name = (nameInput.value || "NEON").toUpperCase();
        ctx.font = "900 80px Orbitron, sans-serif";
        ctx.textAlign = "center";
        ctx.textBaseline = "top";

        // Calcular a largura do texto para posicionar o √≠cone corretamente
        const nameWidth = ctx.measureText(name).width;
        
        // Posicionar o √≠cone do rob√¥ √† esquerda do texto, com base na largura do texto
        const robotIconX = centerX - (nameWidth / 2) - 50; // 50px de margem do texto

        ctx.save();
        ctx.translate(robotIconX, avatarY + avatarR + 40);

        ctx.beginPath();
        ctx.roundRect(0, 0, 35, 45, 5);
        ctx.fillStyle = "#00f7ff";
        ctx.fill();

        ctx.beginPath();
        ctx.roundRect(5, -15, 25, 20, 3);
        ctx.fillStyle = "#00f7ff";
        ctx.fill();

        ctx.beginPath();
        ctx.arc(12, -8, 3, 0, Math.PI * 2);
        ctx.arc(23, -8, 3, 0, Math.PI * 2);
        ctx.fillStyle = "#000";
        ctx.fill();

        ctx.beginPath();
        ctx.moveTo(17, -15);
        ctx.lineTo(17, -25);
        ctx.lineWidth = 2;
        ctx.strokeStyle = "#00f7ff";
        ctx.stroke();

        ctx.beginPath();
        ctx.arc(17, -25, 3, 0, Math.PI * 2);
        ctx.fillStyle = "#ff0055";
        ctx.fill();
        ctx.restore();

        ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
        ctx.shadowBlur = 10;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;

        ctx.shadowColor = "#00f7ff";
        ctx.shadowBlur = 20;
        ctx.fillStyle = "#ffffff";
        ctx.fillText(name, centerX, avatarY + avatarR + 20);
        ctx.shadowBlur = 0;

        const speed = String(speedInput.value || "999");
        ctx.font = "900 70px Orbitron, sans-serif";
        ctx.textBaseline = "top";
        ctx.fillStyle = "#00f7ff";
        ctx.shadowColor = "#00f7ff";
        ctx.shadowBlur = 15;
        ctx.fillText(speed, centerX, avatarY + avatarR + 120);
        ctx.shadowBlur = 0;

        ctx.save();
        ctx.translate(centerX + 180, avatarY + avatarR + 155);

        ctx.beginPath();
        ctx.arc(0, 0, 22, 0.25 * Math.PI, 0.75 * Math.PI);
        ctx.strokeStyle = "#00f7ff";
        ctx.lineWidth = 3;
        ctx.stroke();

        ctx.save();
        ctx.rotate(0.5 * Math.PI);
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(0, -18);
        ctx.strokeStyle = "#ff0055";
        ctx.lineWidth = 2;
        ctx.stroke();
        ctx.restore();

        ctx.beginPath();
        ctx.arc(0, 0, 4, 0, Math.PI * 2);
        ctx.fillStyle = "#00f7ff";
        ctx.fill();
        ctx.restore();

        const label = (labelInput.value || "VELOCIDADE").toUpperCase();
        ctx.font = "700 40px Orbitron, sans-serif";
        ctx.textBaseline = "top";
        ctx.fillStyle = "#ffffff";
        ctx.fillText(label, centerX, avatarY + avatarR + 200);

        const system = (systemInput.value || "").toUpperCase();
        if (system) {
          ctx.font = "600 28px Orbitron, sans-serif";
          ctx.textBaseline = "top";
          ctx.fillStyle = "#b8e6ff";
          ctx.shadowColor = "#00f7ff";
          ctx.shadowBlur = 8;
          ctx.fillText(system, centerX, avatarY + avatarR + 250);
          ctx.shadowBlur = 0;
        }

        // Decorative horizontal line (mantido para est√©tica)
        ctx.beginPath();
        const lineY = avatarY + avatarR + 90;
        ctx.moveTo(centerX - 200, lineY);
        ctx.lineTo(centerX + 200, lineY);
        ctx.lineWidth = 3;
        ctx.strokeStyle = "rgba(0, 247, 255, 0.3)";
        ctx.stroke();

        ctx.textAlign = "start";
        ctx.shadowBlur = 0;
      }

      generateBtn.addEventListener("click", () => draw());

      downloadBtn.addEventListener("click", () => {
        const dataURL = canvas.toDataURL("image/png");
        const a = document.createElement("a");
        a.href = dataURL;
        a.download = (nameInput.value || "neon-banner") + ".png";
        a.click();
      });

      // Adicionar evento para enviar para a API
      generateBtn.addEventListener("click", async () => {
        try {
          catboxLink.innerHTML = '<span class="loading"></span> ENVIANDO PARA API...';
          catboxContainer.style.display = 'block';
          
          const url = await uploadToCatbox();
          showCatboxDownload(url);
        } catch (error) {
          console.error('Erro ao enviar para API:', error);
          catboxLink.innerHTML = '<i class="fas fa-exclamation-triangle"></i> ERRO NO UPLOAD';
        }
      });

      // Inicializar
      applyUrlParams();
      draw();
      generateAndUpload();

      function fitCanvasToContainer() {
        const container = document.querySelector(".canvas-container");
        const maxWidth = container.clientWidth - 50;
        const scale = Math.min(1, maxWidth / canvas.width);
        canvas.style.width = canvas.width * scale + "px";
        canvas.style.height = canvas.height * scale + "px";
      }

      window.addEventListener("resize", fitCanvasToContainer);
      fitCanvasToContainer();
    </script>
  </body>
</html>